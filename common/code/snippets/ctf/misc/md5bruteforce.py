import md5
import itertools
md5s = [174282896860968005525213562254350376167L, #ALEXC
137092044126081477479435678296496849608L,  #TF{d
126300127609096051658061491018211963916L,  #5d4s2
314989972419727999226545215739316729360L,  #vj8nk
256525866025901597224592941642385934114L,  #43s8d
115141138810151571209618282728408211053L,  #8l6m1
8705973470942652577929336993839061582L,  
256697681645515528548061291580728800189L, # ds9v4
39818552652170274340851144295913091599L, # 1n52n
65313561977812018046200997898904313350L, # v37j4
230909080238053318105407334248228870753L, # 81h3d
196125799557195268866757688147870815374L, # 28n4b
74874145132345503095307276614727915885L]  # 6v3k}

data_set="abcdefghijklmnopqrstuvwxyz1234567890_"
flag_log="[]";

for c in itertools.permutations(data_set, 5):
 flag_part=''.join(c)
 print flag_part
  if int('0x' + md5.new(flag_part).hexdigest(), 16) == md5s[6]:
    flag_log=flag_log+"[part "+str(i+1)+" " +flag_part+"]"
  print flag_log

# hashcat or pwntools
# print util.iters.mbruteforce(lambda x: "068cb5a1cf54c078bf0e7e89584c1a4e" == hashlib.md5(x).hexdigest() , string.lowercase+string.uppercase+string.digits,length = 5)
