prompt_fg="\[$(tput setaf 2)\]"
prompt_red_fg="\[$(tput setaf 1)\]"
prompt_bold="\[$(tput bold)\]"
prompt_reset="\[$(tput sgr0)\]"

_fishy_collapsed_wd() {
    wd=$(pwd)
    last_dir="${wd##*/}"
    echo "$wd" | sed '
        s|^'"$HOME"'|~|g;
        s|/\([^/.]\)[^/]*|/\1|g;
        s|/\([^/.]\)[^/]*$|/'"$last_dir"'|g;
        s|/\.\([^/]\)[^/]*|/.\1|g;
        s|/\.\([^/]\)[^/]*$|/'"$last_dir"'|g;
    '
}

_git() {
    git branch >/dev/null 2>&1 || return
    HEAD="$(git symbolic-ref HEAD 2>/dev/null)"
    BRANCH="${HEAD##*/}"
    git status 2>/dev/null | \
        grep -qE 'working (tree|directory) clean' || STATUS="*"
    printf ' (%s)' "${BRANCH:-unknown}${STATUS}"
}

_hg() {
    hg branch >/dev/null 2>&1 || return
    BRANCH="$(hg branch 2>/dev/null)"
    [ -n "$(hg status 2>/dev/null)" ] && STATUS="*"
    printf ' (%s)' "${BRANCH:-unknown}${STATUS}"
}

_svn() {
    svn info >/dev/null 2>&1 || return
    URL="$(svn info 2>/dev/null | \
        awk -F': ' '$1 == "URL" {print $2}')"
    ROOT="$(svn info 2>/dev/null | \
        awk -F': ' '$1 == "Repository Root" {print $2}')"
    BRANCH=${URL/$ROOT}
    BRANCH=${BRANCH#/}
    BRANCH=${BRANCH#branches/}
    BRANCH=${BRANCH%%/*}
    [ -n "$(svn status 2>/dev/null)" ] && STATUS="*"
    printf ' (%s)' "${BRANCH:-unknown}${STATUS}"
}

_vcs() {
    local status=$(_git || _svn || _hg)
    [ -n "$status" ] && printf '%s' "$prompt_reset$status$prompt_fg"
}

prompt_main() {
    local exit_status=$?
    local prompt_exit_status=""
    if [ $exit_status -ne 0 ]; then
        prompt_exit_status=" $prompt_bold$prompt_red_fg$exit_status$prompt_fg"
    fi

    # If the exit status was 127, the command was not found. Let's remove it from history
    local number=$(history 1 | awk '{print $1}')
    if [ -n "$number" ]; then
        if [ "$exit_status" -eq 127 ] && { [ -z "$HISTLASTENTRY" ] || [ "$HISTLASTENTRY" -lt "$number" ]; }; then
            history -d "$number"
        else
            HISTLASTENTRY=$number
        fi
    fi

    local prompt_jobs=
    count_jobs=$(jobs -l | wc -l)
    if [ "$count_jobs" -gt 0 ]; then
        prompt_jobs=" ${prompt_reset}[${count_jobs}]${prompt_fg}"
    fi

    local prompt_vcs_status=$(_vcs)

    local user_at_host=
    if [ -n "$SSH_CLIENT" ] || [ -n "$SSH_CONNECTION" ] || [ -n "$SSH_TTY" ]; then
        user_at_host='\u@\h '
    fi

    # Note: if reset is not followed by a printable character, 
    # terminals with column length matching prompt length 
    # have invalid line wrapping.
    # TODO: show user@host on cwd parsed from `mount -t fuse.sshfs`
    # PS1="$prompt_fg$user_at_host\W$prompt_vcs_status$prompt_jobs$prompt_exit_status $prompt_bold####$prompt_reset "
    PS1="$prompt_fg$user_at_host$(_fishy_collapsed_wd)$prompt_vcs_status$prompt_jobs$prompt_exit_status $prompt_bold####$prompt_reset "
}

# References:
# - https://github.com/jmcclare/jm-shell/blob/master/ps1
# - https://blog.dhampir.no/content/avoiding-invalid-commands-in-bash-history

# vim: filetype=sh
