prompt_fg="\[$(tput setaf 6)\]"
prompt_red_fg="\[$(tput setaf 1)\]"
prompt_bold="\[$(tput bold)\]"
prompt_reset="\[$(tput sgr0)\]"

prompt_git() {
    git branch &>/dev/null || return
    HEAD="$(git symbolic-ref HEAD 2>/dev/null)"
    BRANCH="${HEAD##*/}"
    [ -n "$(git status 2>/dev/null | \
        grep -E 'working (tree|directory) clean')" ] || STATUS="*"
    printf ' (%s)' "${BRANCH:-unknown}${STATUS}"
}

prompt_hg() {
    hg branch &>/dev/null || return
    BRANCH="$(hg branch 2>/dev/null)"
    [ -n "$(hg status 2>/dev/null)" ] && STATUS="*"
    printf ' (%s)' "${BRANCH:-unknown}${STATUS}"
}

prompt_svn() {
    svn info &>/dev/null || return
    URL="$(svn info 2>/dev/null | \
        awk -F': ' '$1 == "URL" {print $2}')"
    ROOT="$(svn info 2>/dev/null | \
        awk -F': ' '$1 == "Repository Root" {print $2}')"
    BRANCH=${URL/$ROOT}
    BRANCH=${BRANCH#/}
    BRANCH=${BRANCH#branches/}
    BRANCH=${BRANCH%%/*}
    [[ -n "$(svn status 2>/dev/null)" ]] && STATUS="*"
    printf ' (%s)' "${BRANCH:-unknown}${STATUS}"
}

prompt_vcs() {
    local status=$(prompt_git || prompt_svn || prompt_hg)
    [ -n "$status" ] && echo -n "$prompt_reset$status$prompt_fg"
}

prompt_main() {
    local exit_status=$?
    local prompt_exit_status=""
    if [ $exit_status -ne 0 ]; then
        prompt_exit_status=" $prompt_bold$prompt_red_fg$exit_status$prompt_fg"
    fi

    # If the exit status was 127, the command was not found. Let's remove it from history
    local number=$(history 1 | awk '{print $1}')
    if [ -n "$number" ]; then
        if [ "$exit_status" -eq 127 ] && { [ -z "$HISTLASTENTRY" ] || [ "$HISTLASTENTRY" -lt "$number" ]; }; then
            history -d "$number"
        else
            HISTLASTENTRY=$number
        fi
    fi

    local prompt_jobs=""
    count_jobs=$(jobs -l | wc -l)
    if [ "$count_jobs" -gt 0 ]; then
        prompt_jobs=" ${prompt_reset}[${count_jobs}]${prompt_fg}"
    fi

    local prompt_vcs_status=$(prompt_vcs)

    user_at_host=
    if [ -n "$SSH_CLIENT" ] || [ -n "$SSH_CONNECTION" ] || [ -n "$SSH_TTY" ]; then
        user_at_host='\u@\h '
    fi

    # Note: if reset is not followed by a printable character, terminals with column length matching prompt length have invalid line wrapping
    PS1="$prompt_fg$user_at_host\W$prompt_vcs_status$prompt_jobs$prompt_exit_status ▬▬▬▬$prompt_reset "
}

# References:
# - https://github.com/jmcclare/jm-shell/blob/master/ps1
# - https://blog.dhampir.no/content/avoiding-invalid-commands-in-bash-history

# vim: filetype=sh
